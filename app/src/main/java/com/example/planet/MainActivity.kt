package com.example.planet

// UI Î∞è other files
import com.example.planet.ui.BottomNavigationBar
import com.example.planet.ui.CameraScreen
import com.example.planet.ui.GuideResultScreen
import com.example.planet.ui.HomeScreen
import com.example.planet.ui.LeaderboardScreen
import com.example.planet.ui.LoginScreen
import com.example.planet.ui.WelcomeScreen
import com.example.planet.ui.Mypage
import com.example.planet.ui.QuizAnswerScreen
import com.example.planet.ui.QuizMatchingQuestionScreen
import com.example.planet.ui.QuizMultipleChoiceQuestionScreen
import com.example.planet.ui.QuizOXQuestionScreen
import com.example.planet.ui.QuizSubjectiveQuestionScreen
import com.example.planet.ui.RecycleSignGuide
import com.example.planet.ui.SplashScreen
import com.example.planet.ui.StudyQuizPage
import com.example.planet.guide.LabelDetector

// Android Í∏∞Î≥∏
import android.os.Bundle
import android.util.Log

// Activity & CameraX
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent

// Compose Í∏∞Î≥∏
import androidx.compose.runtime.*
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.compose.currentBackStackEntryAsState

// Compose Foundation
import androidx.compose.foundation.layout.*

// Compose Material3
import androidx.compose.material3.*

import kotlinx.coroutines.delay

import androidx.camera.core.ImageCapture
import androidx.camera.core.ImageCaptureException
import androidx.camera.core.ImageProxy

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.widget.Toast
import androidx.core.content.ContextCompat
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

import androidx.compose.ui.platform.LocalContext
import androidx.compose.foundation.background
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import java.nio.ByteBuffer

import androidx.navigation.navArgument
import androidx.navigation.NavType
import android.graphics.Matrix
import com.example.planet.ui.SettingScreen
import com.example.planet.data.QuizRepository
import com.example.planet.data.QuizUploader
import com.example.planet.ui.QuizMatchingAnswerScreen
import com.example.planet.utils.UserStateManager

// Firebase Ï∂îÍ∞Ä
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore

class MainActivity : ComponentActivity() {

    lateinit var imageCapture: ImageCapture
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var detector: Yolov8sDetector
    private lateinit var labelDetector: LabelDetector

    companion object {
        // ÌèêÍ∏∞Î¨º Î∂ÑÎ¶¨
        var wasteGuideText: String = "Í∞ÄÏù¥ÎìúÎ•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§."
        var wasteCapturedBitmap: Bitmap? = null

        // Î∂ÑÎ¶¨Î∞∞Ï∂ú ÌëúÏãú
        var labelGuideText: String = ""
        var labelCapturedBitmap: Bitmap? = null
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        UserStateManager.initialize(this)

        detector = Yolov8sDetector(this)
        labelDetector = LabelDetector(this)
        cameraExecutor = Executors.newSingleThreadExecutor()

        setContent {
            val navController = rememberNavController()
            var showSplash by remember { mutableStateOf(true) }
            var startDestination by remember { mutableStateOf("login") }
            var isCheckingAuth by remember { mutableStateOf(true) }
            val context = LocalContext.current
            var fullQuizList by remember { mutableStateOf<List<QuizItem>>(emptyList()) }

            // üÜï ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
            LaunchedEffect(Unit) {
                Log.d("MainActivity", "Ïï± ÏãúÏûë - ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏")
                checkUserAuthentication { destination ->
                    startDestination = destination
                    isCheckingAuth = false
                    Log.d("MainActivity", "ÏãúÏûë Í≤ΩÎ°ú Í≤∞Ï†ï: $destination")
                }

                delay(2000) // Ïä§ÌîåÎûòÏãú ÌôîÎ©¥ ÏãúÍ∞Ñ
                showSplash = false
                QuizRepository.fetchAllChapter1Quizzes { fetched ->
                    fullQuizList = fetched
                }
            }

            MaterialTheme {
                if (showSplash || isCheckingAuth) {
                    SplashScreen()
                } else {
                    Scaffold(
                        containerColor = Color.Transparent, //Î∞∞Í≤Ω Ìà¨Î™ÖÌïòÍ≤å
                        bottomBar = {
                            val currentRoute = getCurrentRoute(navController)
                            // Ïπ¥Î©îÎùºÏôÄ ÌÄ¥Ï¶à Í¥ÄÎ†® ÌôîÎ©¥ÏóêÏÑú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïà®ÍπÄ
                            if (currentRoute != "camera" &&
                                !currentRoute.startsWith("quiz_")) {
                                BottomNavigationBar(
                                    selectedItem = currentRoute,
                                    onItemClick = { route -> navController.navigate(route) }
                                )
                            }
                        }
                    ) { innerPadding ->
                        NavHost(
                            navController = navController,
                            startDestination = startDestination, // üÜï ÎèôÏ†ÅÏúºÎ°ú ÏãúÏûë Í≤ΩÎ°ú ÏÑ§Ï†ï
                            modifier = Modifier.padding(innerPadding)
                                .background(Color(0xFFCAEBF1))//Î∞∞Í≤ΩÏÉâ ÏßÄÏ†ï
                        ) {
                            composable("login") { LoginScreen(navController) }
                            composable(
                                "welcome/{userId}",
                                arguments = listOf(navArgument("userId") { type = NavType.StringType })
                            ) { backStackEntry ->
                                val userId = backStackEntry.arguments?.getString("userId")
                                WelcomeScreen(navController, userId)
                            }
                            composable("home") { HomeScreen(navController) }
                            composable("quiz") { StudyQuizPage(navController) }
                            composable("rank") { LeaderboardScreen(navController) }
                            composable("mypage") { Mypage(navController) }
                            composable("setting") { SettingScreen(navController) }
                            composable("camera") { CameraScreen(navController, this@MainActivity) }
                            composable("recycle_sign_guide") { RecycleSignGuide(navController, guideText = labelGuideText) }
                            composable("waste_guide") { GuideResultScreen(navController, guideText = wasteGuideText) }

                            composable(
                                route = "quiz_question/{index}",
                                arguments = listOf(navArgument("index") { type = NavType.IntType })
                            ) { backStackEntry ->
                                val index = backStackEntry.arguments?.getInt("index") ?: 0
                                QuizQuestionScreen(navController, quizList = fullQuizList, index = index)
                            }

                            composable(
                                route = "quiz_answer/{index}?userAnswer={userAnswer}",
                                arguments = listOf(
                                    navArgument("index") { type = NavType.IntType },
                                    navArgument("userAnswer") {
                                        type = NavType.StringType
                                        defaultValue = ""
                                        nullable = true
                                    }
                                )
                            ) { backStackEntry ->
                                val index = backStackEntry.arguments?.getInt("index") ?: 0
                                val userAnswer = backStackEntry.arguments?.getString("userAnswer") ?: ""

                                if (fullQuizList.isNotEmpty()) {
                                    val quiz = fullQuizList[index]
                                    if (quiz.type == QuizType.MATCHING) {
                                        // Îß§Ïπ≠ÌòïÏùÄ Ï†ÑÏ≤¥ Î¶¨Ïä§Ìä∏ ÎÑòÍ∏∞Í≥†, Í≤∞Í≥º ÌôîÎ©¥ÏóêÏÑú Îß§Ïπ≠ Î°úÏßÅ Îî∞Î°ú Ï≤òÎ¶¨Ìï† ÏàòÎèÑ ÏûàÏùå
                                        navController.navigate("quiz_result") // Îß§Ïπ≠ÌòïÏùÄ Ìï¥ÏÑ§ ÌôîÎ©¥ ÏóÜÏù¥ Í≤∞Í≥ºÎ°ú ÏßÅÌñâÌïòÎèÑÎ°ù ÏÑ§Í≥Ñ Í∞ÄÎä•
                                    } else {
                                        QuizAnswerScreen(
                                            navController = navController,
                                            quizList = fullQuizList,
                                            index = index,
                                            userAnswer = userAnswer
                                        )
                                    }
                                }
                            }
                            // NavHostÏóê Îß§Ïπ≠ Ìï¥ÏÑ§ ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä
                            composable(
                                route = "quiz_matching_answer/{index}?results={results}&quizIds={quizIds}",
                                arguments = listOf(
                                    navArgument("index") { type = NavType.IntType },
                                    navArgument("results") { type = NavType.StringType; defaultValue = "" },
                                    navArgument("quizIds") { type = NavType.StringType; defaultValue = "" }
                                )
                            ) { backStackEntry ->
                                val index = backStackEntry.arguments?.getInt("index") ?: 0
                                val resultsString = backStackEntry.arguments?.getString("results") ?: ""
                                val quizIdsString = backStackEntry.arguments?.getString("quizIds") ?: ""

                                // Îß§Ïπ≠ Í≤∞Í≥º ÌååÏã±
                                val matchedPairs = if (resultsString.isNotBlank()) {
                                    try {
                                        val decoded = java.net.URLDecoder.decode(resultsString, "UTF-8")
                                        decoded.split(",").associate { pair ->
                                            val parts = pair.split("|||")
                                            if (parts.size == 2) {
                                                parts[0] to parts[1]
                                            } else {
                                                "" to ""
                                            }
                                        }.filterKeys { it.isNotBlank() }
                                    } catch (e: Exception) {
                                        Log.e("MainActivity", "Îß§Ïπ≠ Í≤∞Í≥º ÌååÏã± Ïã§Ìå®", e)
                                        emptyMap()
                                    }
                                } else {
                                    emptyMap()
                                }
                                val quizIds = if (quizIdsString.isNotBlank()) {
                                    try {
                                        val decoded = java.net.URLDecoder.decode(quizIdsString, "UTF-8")
                                        decoded.split(",")
                                    } catch (e: Exception) {
                                        emptyList()
                                    }
                                } else {
                                    emptyList()
                                }
                                QuizMatchingAnswerScreen(navController, fullQuizList, index, matchedPairs, quizIds)
                            }
                        }
                    }
                }
            }
        }
    }

    // üÜï ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Ìï®Ïàò
    private fun checkUserAuthentication(onResult: (String) -> Unit) {
        val auth = FirebaseAuth.getInstance()
        val currentUser = auth.currentUser

        Log.d("MainActivity", "ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê: ${currentUser?.uid}")

        if (currentUser != null) {
            // ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏Ïù∏ÎêòÏñ¥ ÏûàÏúºÎ©¥ FirestoreÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
            val db = FirebaseFirestore.getInstance()

            db.collection("users").document(currentUser.uid).get()
                .addOnSuccessListener { document ->
                    if (document.exists()) {
                        Log.d("MainActivity", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°¥Ïû¨ - ÌôàÏúºÎ°ú Ïù¥Îèô")
                        onResult("home") // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Î∞îÎ°ú ÌôàÏúºÎ°ú
                    } else {
                        Log.d("MainActivity", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÜÏùå - Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú")
                        onResult("login") // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú
                    }
                }
                .addOnFailureListener { e ->
                    Log.e("MainActivity", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ Ïã§Ìå®", e)
                    onResult("login") // Ïò§Î•ò Î∞úÏÉù Ïãú Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú
                }
        } else {
            Log.d("MainActivity", "Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê - Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú")
            onResult("login") // Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú
        }
    }

    fun takePhoto(navController: NavHostController) {
        if (!::imageCapture.isInitialized) {
            Log.w("Camera", "imageCapture not initialized")
            Toast.makeText(this, "Ïπ¥Î©îÎùº Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
            return
        }
        val capture = imageCapture ?: return

        capture.takePicture(
            ContextCompat.getMainExecutor(this),
            object : ImageCapture.OnImageCapturedCallback() {
                override fun onCaptureSuccess(imageProxy: ImageProxy) {
                    val bitmap = imageProxyToBitmap(imageProxy)
                    imageProxy.close()

                    val results = detector.detect(bitmap,confidenceThreshold = 0.3f)
                    val filtered = results.filterNot { it.classId == 0 || it.classId == 1 || it.classId == 2}
                        .maxByOrNull { it.confidence }

                    //val results = detector.detect(bitmap)
                    if (results.isNotEmpty()) {
                        wasteGuideText = results[0].guide
                        wasteCapturedBitmap = bitmap
                        navController.navigate("waste_guide")
                    } else {
                        wasteGuideText = "ÏÇ¨ÏßÑÏùÑ Ïù∏ÏãùÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.\nÎã§Ïãú Ï¥¨ÏòÅÌï¥Ï£ºÏÑ∏Ïöî."
                        wasteCapturedBitmap = bitmap
                        navController.navigate("waste_guide")
                    }
                }
                override fun onError(exception: ImageCaptureException) {
                    wasteCapturedBitmap = null
                    wasteGuideText = "Ï¥¨ÏòÅÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.\nÎã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
                    navController.navigate("waste_guide")
                    Log.e("Camera", "Ï¥¨ÏòÅ Ïã§Ìå®", exception)
                }
            }
        )
    }

    private fun imageProxyToBitmap(imageProxy: ImageProxy): Bitmap {
        val buffer: ByteBuffer = imageProxy.planes[0].buffer
        val bytes = ByteArray(buffer.remaining())
        buffer.get(bytes)
        val originalBitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)

        // üìå ÏôºÏ™ΩÏúºÎ°ú 90ÎèÑ ÌöåÏ†Ñ (Î∞òÏãúÍ≥Ñ Î∞©Ìñ•)
        val matrix = Matrix().apply {
            postRotate(90f)
        }

        return Bitmap.createBitmap(
            originalBitmap,
            0, 0,
            originalBitmap.width,
            originalBitmap.height,
            matrix,
            true
        )
    }

    fun takeLabelPhoto(navController: NavHostController) {
        if (!::imageCapture.isInitialized) {
            Log.w("Camera", "imageCapture not initialized")
            Toast.makeText(this, "Ïπ¥Î©îÎùº Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
            return
        }

        val capture = imageCapture ?: return

        capture.takePicture(
            ContextCompat.getMainExecutor(this),
            object : ImageCapture.OnImageCapturedCallback() {
                override fun onCaptureSuccess(imageProxy: ImageProxy) {
                    val bitmap = imageProxyToBitmap(imageProxy)
                    imageProxy.close()

                    labelDetector.process(
                        bitmap,
                        onResult = { resultBitmap, guideText ->
                            labelCapturedBitmap = resultBitmap
                            labelGuideText = guideText
                            navController.navigate("recycle_sign_guide")
                        },
                        onError = { resultBitmap, guideText ->
                            labelCapturedBitmap = resultBitmap
                            labelGuideText = guideText
                            navController.navigate("recycle_sign_guide")
                        }
                    )
                }

                override fun onError(exception: ImageCaptureException) {
                    labelCapturedBitmap = null
                    labelGuideText = "Ï¥¨ÏòÅÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.\nÎã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
                    navController.navigate("recycle_sign_guide")
                    Log.e("Camera", "Ï¥¨ÏòÅ Ïã§Ìå®", exception)
                }
            }
        )
    }
}

@Composable
fun QuizQuestionScreen(navController: NavHostController, quizList: List<QuizItem>, index: Int) {
    val quiz = quizList.getOrNull(index) ?: return
    when (quiz.type) {
        QuizType.OX -> QuizOXQuestionScreen(navController, quizList, index)
        QuizType.SUBJECTIVE -> QuizSubjectiveQuestionScreen(navController, quizList, index)
        QuizType.MATCHING -> QuizMatchingQuestionScreen(navController, quizList, index)
        QuizType.MULTIPLE_CHOICE -> QuizMultipleChoiceQuestionScreen(navController, quizList, index)
    }
}

@Composable
fun getCurrentRoute(navController: NavHostController): String {
    val navBackStackEntry by navController.currentBackStackEntryAsState()
    return navBackStackEntry?.destination?.route ?: "home"
}