package com.example.planet.ui

import android.annotation.SuppressLint
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.NavigateNext
import androidx.compose.material.icons.filled.KeyboardDoubleArrowRight
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.example.planet.R
import com.example.planet.utils.UserStateManager
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.example.planet.data.UserQuizRepository
import com.example.planet.utils.customShadow

@SuppressLint("SuspiciousIndentation")
@Composable
fun StudyQuizPage(navController: NavHostController) {
    val pretendardsemibold = FontFamily(Font(R.font.pretendardsemibold))
    val pretendardbold = FontFamily(Font(R.font.pretendardbold))
    val context = LocalContext.current

    // Firebase
    val currentUserId = UserStateManager.getUserId()
    val db = FirebaseFirestore.getInstance()

    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÉÅÌÉú
    var userName by remember { mutableStateOf("Î°úÎî©Ï§ë...") }
    var userScore by remember { mutableStateOf(0) }
    var lastQuestionIndex by remember { mutableStateOf(1) }
    var isLoading by remember { mutableStateOf(true) }

    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    LaunchedEffect(Unit) {
        Log.d("StudyQuizPage", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú ÏãúÏûë")
        currentUserId?.let { userId ->
            Log.d("StudyQuizPage", "ÏÇ¨Ïö©Ïûê UID: $userId")

            db.collection("users").document(userId).get()
                .addOnSuccessListener { userDoc ->
                    Log.d("StudyQuizPage", "ÏÇ¨Ïö©Ïûê Î¨∏ÏÑú Ï°¥Ïû¨: ${userDoc.exists()}")
                    if (userDoc.exists()) {
                        Log.d("StudyQuizPage", "ÏÇ¨Ïö©Ïûê Î¨∏ÏÑú Îç∞Ïù¥ÌÑ∞: ${userDoc.data}")

                        userName = userDoc.getString("name") ?: "Ïù¥Î¶Ñ ÏóÜÏùå"
                        userScore = userDoc.getLong("score")?.toInt() ?: 0
                        lastQuestionIndex = userDoc.getLong("lastQuestionIndex")?.toInt() ?: 1

                        Log.d("StudyQuizPage", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ - Ïù¥Î¶Ñ: $userName, Ï†êÏàò: $userScore, ÎßàÏßÄÎßâÎ¨∏Ï†ú: $lastQuestionIndex")
                        isLoading = false
                    } else {
                        Log.w("StudyQuizPage", "ÏÇ¨Ïö©Ïûê Î¨∏ÏÑú ÏóÜÏùå")
                        userName = "Ï†ïÎ≥¥ ÏóÜÏùå"
                        isLoading = false
                    }
                }
                .addOnFailureListener { e ->
                    Log.e("StudyQuizPage", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®", e)
                    userName = "Î°úÎìú Ïã§Ìå®"
                    isLoading = false
                }
        } ?: run {
            Log.w("StudyQuizPage", "Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê")
            userName = "Î°úÍ∑∏Ïù∏ ÌïÑÏöî"
            isLoading = false
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFCAEBF1))
            .padding(
                start = 20.dp,
                end = 20.dp,
                top = 70.dp
            )
    ) {

        // ======= Ï∂úÏÑù Ìó§Îçî =======
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = if (isLoading) "Î°úÎî©Ï§ë..." else "üåû ÏïàÎÖïÌïòÏÑ∏Ïöî, ${userName}Îãò!",
                style = MaterialTheme.typography.bodyLarge,
                fontSize = 14.sp,
                fontFamily = pretendardsemibold
            )
            Text(
                text = "${userScore} P",
                fontSize = 14.sp,
                color = Color.Black,
                fontFamily = pretendardsemibold
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // ======= ÏµúÍ∑º ÌÄ¥Ï¶à Î∞ïÏä§ (Firebase + SharedPreferences ÌÜµÌï©) =======
        Surface(
            tonalElevation = 8.dp,
            shadowElevation = 8.dp,
            shape = RoundedCornerShape(20.dp),
            color = Color.White,
            modifier = Modifier
                .fillMaxWidth()
                .height(80.dp)
                .customShadow()
                .clickable {
                    Log.d("RecentQuizBox", "ÏµúÍ∑º ÌÄ¥Ï¶à Î∞ïÏä§ ÌÅ¥Î¶≠")

                    val userId = UserStateManager.getUserId()

                    if (userId != null) {
                        // FirebaseÏóêÏÑú lastQuestionIndex Í∞ÄÏ†∏Ïò§Í∏∞ (Ïö∞ÏÑ†ÏàúÏúÑ)
                        UserQuizRepository.fetchLastQuestionIndex(userId) { fetchedIndex ->
                            val startIndex = when {
                                // FirebaseÏóêÏÑú Í∞ÄÏ†∏Ïò® Í∞íÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
                                fetchedIndex != null && fetchedIndex > 0 -> {
                                    Log.d("RecentQuizBox", "FirebaseÏóêÏÑú Í∞ÄÏ†∏Ïò® Ïù∏Îç±Ïä§: $fetchedIndex")
                                    fetchedIndex - 1 // Îã§Ïùå Î¨∏Ï†úÎ°ú Ïù¥ÎèôÌïòÍ∏∞ ÏúÑÌï¥ -1
                                }
                                // Firebase Í∞íÏù¥ ÏóÜÏúºÎ©¥ Î©îÎ™®Î¶¨/SharedPreferencesÏóêÏÑú lastQuestionIndex ÏÇ¨Ïö©
                                lastQuestionIndex > 1 -> {
                                    Log.d("RecentQuizBox", "Î©îÎ™®Î¶¨ÏóêÏÑú Í∞ÄÏ†∏Ïò® Ïù∏Îç±Ïä§: $lastQuestionIndex")
                                    lastQuestionIndex - 1
                                }
                                // Îëò Îã§ ÏóÜÏúºÎ©¥ Ï≤´ Î¨∏Ï†úÎ∂ÄÌÑ∞
                                else -> {
                                    Log.d("RecentQuizBox", "Ï≤´ Î¨∏Ï†úÎ∂ÄÌÑ∞ ÏãúÏûë")
                                    0
                                }
                            }

                            Log.d("RecentQuizBox", "Ïù¥ÎèôÌï† Î¨∏Ï†ú Ïù∏Îç±Ïä§: $startIndex")
                            navController.navigate("quiz_question/$startIndex")
                        }
                    } else {
                        // Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Î©îÎ™®Î¶¨Ïùò lastQuestionIndex ÏÇ¨Ïö©
                        val startIndex = if (lastQuestionIndex > 1) lastQuestionIndex - 1 else 0
                        Log.d("RecentQuizBox", "Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå, Î©îÎ™®Î¶¨ Ïù∏Îç±Ïä§ ÏÇ¨Ïö©: $startIndex")
                        navController.navigate("quiz_question/$startIndex")
                    }
                }
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "RECENT QUIZ",
                    color = Color.Gray,
                    fontSize = 12.06.sp,
                    fontFamily = pretendardbold,
                    modifier = Modifier.padding(start = 15.dp)
                )
                Spacer(modifier = Modifier.height(4.dp))
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 15.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = if (isLoading) "Î°úÎî©Ï§ë..."
                            else if (lastQuestionIndex <= 1) "Ï≤´ Î¨∏Ï†úÎ•º ÌíÄÏñ¥Î≥¥ÏÑ∏Ïöî !"
                            else "${lastQuestionIndex}Î≤à Î¨∏Ï†úÎ∂ÄÌÑ∞ Í≥ÑÏÜçÌïòÍ∏∞",
                            color = Color(0xFF546A6E),
                            fontSize = 16.64.sp,
                            style = MaterialTheme.typography.titleMedium,
                            fontFamily = pretendardbold
                        )

                        Spacer(modifier = Modifier.width(6.dp))

                        Icon(
                            imageVector = Icons.Default.KeyboardDoubleArrowRight,
                            contentDescription = "Next",
                            tint = Color(0xFF546A6E)
                        )
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // ===== Ìù∞ÏÉâ Î∞ïÏä§ =====
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    color = Color.White,
                    shape = RoundedCornerShape(topStart = 30.dp, topEnd = 30.dp)
                )
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
                    .padding(24.dp)
            ) {
                Text(
                    text = "Study Quizzes",
                    fontSize = 20.sp,
                    fontFamily = pretendardbold,
                    color = Color(0xFF546A6E)
                )

                Spacer(modifier = Modifier.height(20.dp))

                val selectedChapterIndex = remember { mutableStateOf(0) }

                // üÜï Ï±ïÌÑ∞ Ï†ïÎ≥¥ Í≥ÑÏÇ∞
                val chapters = listOf(
                    Triple("1", "Chapter 1", 20),
                    Triple("2", "Chapter 2", 20),
                    Triple("3", "Chapter 3", 20),
                    Triple("4", "Chapter 4", 20),
                    Triple("5", "Chapter 5", 20)
                )

                chapters.forEachIndexed { index, (number, title, totalQuestions) ->
                    // Ï±ïÌÑ∞Î≥Ñ ÏãúÏûë Ïù∏Îç±Ïä§ Í≥ÑÏÇ∞ (0Î∂ÄÌÑ∞ ÏãúÏûë)
                    val chapterStartIndex = index * totalQuestions
                    val chapterEndIndex = chapterStartIndex + totalQuestions - 1

                    // ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏ (ÎßàÏßÄÎßâ Î¨∏Ï†ú Ïù∏Îç±Ïä§Í∞Ä Ï±ïÌÑ∞ ÎÅùÏùÑ ÎÑòÏóàÎäîÏßÄ)
                    val isCompleted = !isLoading && lastQuestionIndex > chapterEndIndex + 1

                    // ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ï±ïÌÑ∞Ïù∏ÏßÄ ÌôïÏù∏
                    val isCurrentChapter = !isLoading &&
                            lastQuestionIndex > chapterStartIndex &&
                            lastQuestionIndex <= chapterEndIndex + 1

                    // üÜï Ï†ëÍ∑º Í∞ÄÎä•ÌïúÏßÄ ÌôïÏù∏ (ÏàúÏÑúÎåÄÎ°úÎßå Ï†ëÍ∑º Í∞ÄÎä•)
                    val isAccessible = !isLoading && (
                            index == 0 || // Ï≤´ Î≤àÏß∏ Ï±ïÌÑ∞Îäî Ìï≠ÏÉÅ Ï†ëÍ∑º Í∞ÄÎä•
                                    lastQuestionIndex > chapterStartIndex // Ïù¥Ï†Ñ Ï±ïÌÑ∞Î•º ÏôÑÎ£åÌñàÏùÑ ÎïåÎßå Ï†ëÍ∑º Í∞ÄÎä•
                            )

                    // Ïû†Í≤®ÏûàÎäîÏßÄ ÌôïÏù∏
                    val isLocked = !isLoading && !isAccessible

                    // Ìï¥Îãπ Ï±ïÌÑ∞ÏóêÏÑú Î™á Î¨∏Ï†ú ÏôÑÎ£åÌñàÎäîÏßÄ Í≥ÑÏÇ∞
                    val completedInChapter = when {
                        isCompleted -> totalQuestions
                        isCurrentChapter -> (lastQuestionIndex - 1) - chapterStartIndex
                        else -> 0
                    }

                    val subtitle = when {
                        isLoading -> "Î°úÎî©Ï§ë..."
                        isLocked -> "$totalQuestions Î¨∏Ï†ú | Ïû†ÍπÄ"
                        isCompleted -> "$totalQuestions Î¨∏Ï†ú | ÏôÑÎ£å!"
                        isCurrentChapter -> "$totalQuestions Î¨∏Ï†ú | ${completedInChapter}/$totalQuestions"
                        else -> "$totalQuestions Î¨∏Ï†ú"
                    }

                    val backgroundColor = when {
                        isLocked -> Color(0xFFF5F5F5) // ÌöåÏÉâ Î∞∞Í≤Ω
                        isCompleted -> Color(0xFF4E4E58) // ÏôÑÎ£åÎêú Ï±ïÌÑ∞
                        else -> Color.White // ÏùºÎ∞ò ÏÉÅÌÉú
                    }

                    val borderColor = when {
                        isLocked -> Color(0xFFE0E0E0) // Ïó∞Ìïú ÌöåÏÉâ ÌÖåÎëêÎ¶¨
                        isCompleted -> Color.Transparent
                        else -> Color(0xFFB9DEE4)
                    }

                    val titleColor = when {
                        isLocked -> Color(0xFFBDBDBD) // Ïó∞Ìïú ÌöåÏÉâ
                        isCompleted -> Color(0xFFC2EFF7)
                        else -> Color(0xFF546A6E)
                    }

                    val subtitleColor = when {
                        isLocked -> Color(0xFFE0E0E0) // Ïó∞Ìïú ÌöåÏÉâ
                        isCompleted -> Color(0xFF95D0DB)
                        else -> Color(0xFF858494)
                    }

                    Button(
                        onClick = {
                            if (!isLocked) {
                                val startIndex = when {
                                    // ÏôÑÎ£åÎêú Ï±ïÌÑ∞Î©¥ Ìï¥Îãπ Ï±ïÌÑ∞ Ï≤´ Î¨∏Ï†úÎ°ú
                                    isCompleted -> chapterStartIndex
                                    // ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ï±ïÌÑ∞Î©¥ ÎßàÏßÄÎßâ Î¨∏Ï†ú Ïù∏Îç±Ïä§Î°ú
                                    isCurrentChapter -> lastQuestionIndex - 1
                                    // ÏïÑÏßÅ ÏãúÏûëÌïòÏßÄ ÏïäÏùÄ Ï±ïÌÑ∞Î©¥ Ìï¥Îãπ Ï±ïÌÑ∞ Ï≤´ Î¨∏Ï†úÎ°ú
                                    else -> chapterStartIndex
                                }
                                Log.d("StudyQuizPage", "Ï±ïÌÑ∞ $number ÌÅ¥Î¶≠ - startIndex: $startIndex")
                                navController.navigate("quiz_question/$startIndex")
                            } else {
                                Log.d("StudyQuizPage", "Ï±ïÌÑ∞ $number Ïû†ÍπÄ - Ïù¥Ï†Ñ Ï±ïÌÑ∞Î•º Î®ºÏ†Ä ÏôÑÎ£åÌïòÏÑ∏Ïöî")
                            }
                        },
                        colors = ButtonDefaults.buttonColors(containerColor = backgroundColor),
                        shape = RoundedCornerShape(20.dp),
                        contentPadding = PaddingValues(),
                        enabled = !isLocked, // Ïû†Í∏¥ Ï±ïÌÑ∞Îäî ÎπÑÌôúÏÑ±Ìôî
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(80.dp)
                            .border(
                                width = 2.dp,
                                color = borderColor,
                                shape = RoundedCornerShape(20.dp)
                            )
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxSize()
                                .padding(horizontal = 11.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Box(
                                modifier = Modifier
                                    .size(60.dp)
                                    .background(
                                        if (isLocked) Color(0xFFE0E0E0) else Color(0xFF53AEBE),
                                        shape = RoundedCornerShape(17.dp)
                                    ),
                                contentAlignment = Alignment.Center
                            ) {
                                if (isLocked) {
                                    Icon(
                                        imageVector = Icons.Default.Lock,
                                        contentDescription = "Locked",
                                        tint = Color.White,
                                        modifier = Modifier.size(30.dp)
                                    )
                                } else {
                                    Text(
                                        text = number,
                                        fontSize = 27.sp,
                                        fontFamily = pretendardbold,
                                        color = Color.White
                                    )
                                }
                            }

                            Spacer(modifier = Modifier.width(16.dp))

                            Column {
                                Text(
                                    text = title,
                                    fontSize = 16.sp,
                                    fontFamily = pretendardbold,
                                    color = titleColor
                                )
                                Text(
                                    text = subtitle,
                                    fontSize = 14.sp,
                                    fontFamily = pretendardsemibold,
                                    color = subtitleColor
                                )
                            }

                            Spacer(modifier = Modifier.weight(1f))

                            if (!isLocked) {
                                Icon(
                                    imageVector = Icons.AutoMirrored.Filled.NavigateNext,
                                    contentDescription = "Next",
                                    tint = Color(0xFF53AEBE)
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))
                }
            }
        }
    }
}