package com.example.planet.ui

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.outlined.CheckCircle
import androidx.compose.material.icons.rounded.ArrowBackIosNew
import androidx.compose.material3.IconButton
import androidx.compose.ui.Alignment
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.sp
import com.example.planet.QuizItem
import com.example.planet.QuizType
import com.example.planet.R
import com.example.planet.utils.RankingUtils
import com.example.planet.utils.UserStateManager
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore

@Composable
fun QuizMatchingAnswerScreen(
    navController: NavHostController,
    quizList: List<QuizItem>,
    index: Int,
    matchedPairs: Map<String, String>,
    quizIds: List<String>
) {
    val pretendardsemibold = FontFamily(Font(R.font.pretendardsemibold))

    // Firebase
    val currentUserId = UserStateManager.getUserId()
    val db = FirebaseFirestore.getInstance()

    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÉÅÌÉú
    var userScore by remember { mutableStateOf(0) }
    var totalQuestions by remember { mutableStateOf(100) }
    var isLoading by remember { mutableStateOf(true) }
    var scoreUpdated by remember { mutableStateOf(false) }

    // üÜï Ï†ÑÎã¨Î∞õÏùÄ quizIdsÎ°ú Î¨∏Ï†ú Ï∞æÍ∏∞ (Í∞ÑÎã®!)
    val currentQuizSet = remember(quizIds) {
        quizIds.mapNotNull { id ->
            quizList.find { it.id == id }
        }
    }

    // üÜï Ï†ïÎãµ Îß§Ïπ≠ Ï†ïÎ≥¥
    val correctPairs = remember(currentQuizSet) {
        currentQuizSet.associate { it.question to it.correctAnswer }
    }

    // üÜï Ï†ïÎãµ Ï≤¥ÌÅ¨ (Î™®Îì† Îß§Ïπ≠Ïù¥ ÎßûÏïÑÏïºÎßå Ï†ïÎãµ)
    val isAllCorrect = remember(matchedPairs, correctPairs) {
        matchedPairs.size == correctPairs.size &&
                matchedPairs.all { (question, userAnswer) ->
                    correctPairs[question] == userAnswer
                }
    }

    // üÜï ÌãÄÎ¶∞ Î¨∏Ï†úÎì§Ïùò Ìï¥ÏÑ§ ÏàòÏßë
    val wrongExplanations = remember(matchedPairs, correctPairs) {
        matchedPairs.mapNotNull { (question, userAnswer) ->
            val correctAnswer = correctPairs[question]
            if (correctAnswer != userAnswer) {
                val quizItem = currentQuizSet.find { it.question == question }
                quizItem?.explanation ?: "Ìï¥ÏÑ§Ïù¥ ÏóÜÏäµÎãàÎã§."
            } else null
        }
    }

    // üÜï Í∏∞Ï°¥ Ìï¥ÏÑ§ ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùºÌïú Ï†êÏàò Î°úÏßÅ (Ï†ïÎãµ 10Ï†ê, Ïò§Îãµ 5Ï†ê)
    LaunchedEffect(Unit) {
        Log.d("QuizMatchingAnswer", "Îß§Ïπ≠ Ìï¥ÏÑ§ ÌôîÎ©¥ Ï¥àÍ∏∞Ìôî - Ïù∏Îç±Ïä§: $index, Î™®Îì† Îß§Ïπ≠ Ï†ïÎãµ Ïó¨Î∂Ä: $isAllCorrect")

        currentUserId?.let { userId ->
            Log.d("QuizMatchingAnswer", "ÏÇ¨Ïö©Ïûê UID: $userId")

            // 1. ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            db.collection("users").document(userId).get()
                .addOnSuccessListener { userDoc ->
                    if (userDoc.exists()) {
                        val currentScore = userDoc.getLong("score")?.toInt() ?: 0
                        userScore = currentScore

                        Log.d("QuizMatchingAnswer", "ÌòÑÏû¨ Ï†êÏàò: $currentScore")

                        // 2. Ï†êÏàò Í≥ÑÏÇ∞ Î∞è ÏóÖÎç∞Ïù¥Ìä∏ (Í∏∞Ï°¥Í≥º ÎèôÏùºÌïú Î°úÏßÅ)
                        if (!scoreUpdated) {
                            val pointsToAdd = if (isAllCorrect) 10 else 5
                            val newScore = currentScore + pointsToAdd

                            Log.d("QuizMatchingAnswer", "Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ - Ï∂îÍ∞ÄÏ†êÏàò: $pointsToAdd, ÏÉàÏ†êÏàò: $newScore")

                            // 3. RankingUtilsÎ•º ÌÜµÌïú Ï†êÏàò Î∞è Îû≠ÌÇπ ÏóÖÎç∞Ïù¥Ìä∏
                            RankingUtils.updateUserScoreAndRanking(
                                db = db,
                                userId = userId,
                                newScore = newScore,
                                onSuccess = {
                                    userScore = newScore
                                    scoreUpdated = true
                                    isLoading = false
                                    Log.d("QuizMatchingAnswer", "‚úÖ Ï†êÏàò Î∞è Îû≠ÌÇπ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ: $newScore")
                                },
                                onFailure = { error ->
                                    Log.e("QuizMatchingAnswer", "‚ùå Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: $error")
                                    isLoading = false
                                }
                            )
                        } else {
                            isLoading = false
                        }
                    } else {
                        Log.w("QuizMatchingAnswer", "ÏÇ¨Ïö©Ïûê Î¨∏ÏÑú ÏóÜÏùå")
                        isLoading = false
                    }
                }
                .addOnFailureListener { e ->
                    Log.e("QuizMatchingAnswer", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®", e)
                    isLoading = false
                }
        } ?: run {
            Log.w("QuizMatchingAnswer", "Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê")
            isLoading = false
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF7AC5D3))
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp)
                .align(Alignment.BottomCenter)
                .clip(RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp))
                .background(Color.White)
                .height(800.dp)
        ) {

            // ÏÉÅÎã®Î∞î (Í∏∞Ï°¥Í≥º ÎèôÏùº)
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
                    .align(Alignment.TopCenter),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                IconButton(onClick = {
                    navController.navigate("quiz") {
                        popUpTo("quiz") { inclusive = false }
                        launchSingleTop = true
                    }
                }) {
                    Icon(
                        imageVector = Icons.Rounded.ArrowBackIosNew,
                        modifier = Modifier.size(25.dp),
                        tint = Color.Gray,
                        contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞"
                    )
                }

                Text(
                    text = "${index + 1} / $totalQuestions",
                    fontSize = 18.sp,
                    color = Color.Black,
                    fontFamily = pretendardsemibold
                )

                Text(
                    text = if (isLoading) "Î°úÎî©..." else "$userScore P",
                    fontSize = 13.sp,
                    color = if (scoreUpdated && !isLoading) Color(0xFF4CAF50) else Color.Gray,
                    fontFamily = pretendardsemibold
                )
            }

            // üÜï Îß§Ïπ≠ Í≤∞Í≥º ÏòÅÏó≠ (2x2 Í∑∏Î¶¨Îìú)
            Column(
                modifier = Modifier
                    .align(Alignment.TopCenter)
                    .padding(horizontal = 20.dp, vertical = 100.dp)
                    .heightIn(max = 250.dp)
            ) {
                val matchingList = matchedPairs.toList()

                // 2x2 Í∑∏Î¶¨ÎìúÎ°ú Î∞∞Ïπò
                for (rowIndex in 0 until 2) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        for (colIndex in 0 until 2) {
                            val itemIndex = rowIndex * 2 + colIndex
                            if (itemIndex < matchingList.size) {
                                val (question, userAnswer) = matchingList[itemIndex]
                                val correctAnswer = correctPairs[question]
                                val isCorrect = correctAnswer == userAnswer

                                Column(
                                    modifier = Modifier
                                        .weight(1f)
                                        .padding(2.dp)
                                ) {
                                    // ÏßàÎ¨∏ Î∞ïÏä§
                                    Box(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .height(30.dp)
                                            .clip(RoundedCornerShape(6.dp))
                                            .background(
                                                if (isCorrect) Color(0xFFE8F5E8)
                                                else Color(0xFFFFEBEE)
                                            )
                                            .border(
                                                1.dp,
                                                if (isCorrect) Color(0xFF4CAF50)
                                                else Color(0xFFE57373),
                                                RoundedCornerShape(6.dp)
                                            )
                                            .padding(4.dp)
                                    ) {
                                        Text(
                                            text = question,
                                            fontSize = 8.sp,
                                            fontFamily = pretendardsemibold,
                                            color = Color.Black,
                                            textAlign = TextAlign.Center,
                                            modifier = Modifier.align(Alignment.Center),
                                            maxLines = 2
                                        )
                                    }

                                    Spacer(modifier = Modifier.height(2.dp))

                                    // ÎãµÏïà Î∞ïÏä§
                                    Box(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .height(40.dp)
                                            .clip(RoundedCornerShape(6.dp))
                                            .background(Color(0xFFF5F5F5))
                                            .border(1.dp, Color(0xFFE0E0E0), RoundedCornerShape(6.dp))
                                            .padding(4.dp)
                                    ) {
                                        Text(
                                            text = userAnswer,
                                            fontSize = 7.sp,
                                            fontFamily = pretendardsemibold,
                                            color = Color(0xFF666666),
                                            textAlign = TextAlign.Center,
                                            modifier = Modifier.align(Alignment.Center),
                                            maxLines = 3
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Îã§Ïùå Î¨∏Ï†ú Î≤ÑÌäº (Í∏∞Ï°¥Í≥º ÎèôÏùº)
            Row(
                modifier = Modifier
                    .align(Alignment.TopEnd)
                    .padding(top = 200.dp, end = 30.dp)
                    .clickable {
                        val nextIndex = index + 1
                        Log.d("QuizMatchingAnswer", "Îã§Ïùå Î¨∏Ï†ú ÌÅ¥Î¶≠ - Îã§Ïùå Ïù∏Îç±Ïä§: $nextIndex")
                        if (nextIndex < quizList.size) {
                            navController.navigate("quiz_question/$nextIndex")
                        } else {
                            Log.d("QuizMatchingAnswer", "ÎßàÏßÄÎßâ Î¨∏Ï†ú ÏôÑÎ£å, ÌÄ¥Ï¶à Î©îÏù∏ÏúºÎ°ú Ïù¥Îèô")
                            navController.navigate("quiz")
                        }
                    },
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = if (index + 1 >= quizList.size) "ÏôÑÎ£å" else "Îã§Ïùå Î¨∏Ï†ú",
                    fontSize = 12.sp,
                    fontFamily = pretendardsemibold,
                    color = Color(0xFF585858)
                )
                Icon(
                    imageVector = Icons.AutoMirrored.Rounded.ArrowForwardIos,
                    contentDescription = "Îã§Ïùå Î¨∏Ï†ú",
                    modifier = Modifier.padding(start = 4.dp),
                    tint = Color(0xFF585858)
                )
            }

            Spacer(modifier = Modifier.height(20.dp))

            // Ìï¥ÏÑ§ ÏòÅÏó≠ (Í∏∞Ï°¥Í≥º ÎèôÏùºÌïú Ïä§ÌÉÄÏùº)
            Column(
                modifier = Modifier
                    .align(Alignment.Center)
                    .offset(y = 70.dp)
                    .fillMaxWidth(0.80f)
                    .height(350.dp)
                    .clip(RoundedCornerShape(24.dp))
                    .background(Color(0xFFF9F6F2))
                    .padding(29.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = if (isAllCorrect) "Ï†ïÎãµ!" else "Ïò§Îãµ!",
                    fontSize = 22.sp,
                    fontFamily = pretendardsemibold,
                    color = Color.Black
                )

                Spacer(modifier = Modifier.height(14.dp))

                Icon(
                    imageVector = if (isAllCorrect) Icons.Outlined.CheckCircle else Icons.Default.Close,
                    contentDescription = "Í≤∞Í≥º ÏïÑÏù¥ÏΩò",
                    tint = if (isAllCorrect) Color(0xFFE56A6A) else Color(0xFF4A75E1),
                    modifier = Modifier.size(70.dp)
                )

                Spacer(modifier = Modifier.height(14.dp))

                // üÜï Ï†êÏàò ÌöçÎìù ÌëúÏãú (Í∏∞Ï°¥Í≥º ÎèôÏùºÌïú Î°úÏßÅ)
                Text(
                    text = if (isAllCorrect) "+10Ï†ê ÌöçÎìù!" else "+5Ï†ê ÌöçÎìù!",
                    fontSize = 16.sp,
                    fontFamily = pretendardsemibold,
                    color = if (isAllCorrect) Color(0xFF4CAF50) else Color(0xFF2196F3)
                )

                Spacer(modifier = Modifier.height(10.dp))

                // üÜï Í≤∞Í≥ºÎ≥Ñ Î©îÏãúÏßÄ
                if (isAllCorrect) {
                    Text(
                        text = "Î™®Îëê Ïò¨Î∞îÎ•¥Í≤å Ïó∞Í≤∞ÌñàÏäµÎãàÎã§!",
                        fontSize = 13.sp,
                        fontFamily = pretendardsemibold,
                        color = Color.Black,
                        textAlign = TextAlign.Center
                    )
                } else {
                    // üÜï ÌãÄÎ¶∞ Î¨∏Ï†úÎì§Ïùò Ìï¥ÏÑ§ ÌëúÏãú
                    Column {
                        wrongExplanations.forEach { explanation ->
                            Text(
                                text = explanation,
                                fontSize = 11.sp,
                                fontFamily = pretendardsemibold,
                                color = Color.Black,
                                textAlign = TextAlign.Center,
                                modifier = Modifier.padding(vertical = 2.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}